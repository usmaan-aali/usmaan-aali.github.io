I"9+<h1 id="etl">ETL</h1>
<h3 id="load-libraries">load libraries</h3>
<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">tidyverse</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">stringi</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">readxl</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h1 id="load-data">Load Data</h1>

<h3 id="enter-the-path-of-the-folder-for-task-files">enter the path of the folder for task files</h3>
<p>back_data_dir &lt;- file.path(“E:/experiment_data/Backward”)
flanker_data_dir &lt;- file.path(“E:/experiment_data/Flanker”)
stroop_data_dir &lt;- file.path(“E:/experiment_data/Stroop”)</p>

<h3 id="create-a-list-of-all-file-names">Create a list of all file names</h3>
<p>back_file_names &lt;- list.files(back_data_dir,pattern = “.txt”, full.names = TRUE)
flanker_file_names &lt;- list.files(flanker_data_dir,pattern = “.txt”, full.names = TRUE)
stroop_file_names &lt;- list.files(stroop_data_dir,pattern = “.txt”, full.names = TRUE)</p>

<h3 id="read-data-from-all-of-the-files-and-create-a-list">Read data from all of the files and create a list</h3>
<p>data_backward &lt;- lapply(back_file_names, read.table)
data_flanker &lt;- lapply(flanker_file_names, read.table)
data_stroop &lt;- lapply(stroop_file_names, read.table)</p>

<h3 id="change-the-name-of-the-each-data-frame-of-list-to-the-participant-name">Change the name of the each data frame of list to the participant name</h3>
<p>names(data_backward) &lt;- stri_sub(back_file_names,-9,-5)
names(data_flanker) &lt;- stri_sub(flanker_file_names,-9,-5)
names(data_stroop) &lt;- stri_sub(stroop_file_names,-9,-5)</p>

<h3 id="check-the-list-of-data-frames-with-their-participant-name">check the list of data frames with their participant name</h3>
<p>data_backward
data_flanker
data_stroop</p>

<h3 id="convert-list-of-data-frames-into-one-data-frame">Convert list of data frames into one data frame</h3>
<p>backward_df &lt;- do.call(“rbind”, data_backward)
flanker_df &lt;- do.call(“rbind”, data_flanker)
stroop_df &lt;- do.call(“rbind”, data_stroop)</p>

<h3 id="check-single-data-frame-of-backward-test">check single data frame of backward test</h3>
<p>str(backward_df)
str(flanker_df)
str(stroop_df)</p>

<h3 id="add-participants-name-along-with-number-of-obseravation-as-column">Add participants name along with number of obseravation as column</h3>
<p>backward_df &lt;- tibble::rownames_to_column(backward_df,”row_names”)
flanker_df &lt;- tibble::rownames_to_column(flanker_df,”row_names”)
stroop_df &lt;- tibble::rownames_to_column(stroop_df,”row_names”)</p>

<h3 id="change-column-names-of-backward-task-data-frame">change column names of backward task data frame</h3>
<p>colnames(backward_df) &lt;- c(“participant.No_of_observation”,”highest_span”,”Number_of_times”,”result_backwar_task”,”Name_of_table_row”)
colnames(flanker_df) &lt;- c(“participant.No_of_observation”,”stimulus”,”congruency”,”result_flanker_task”,”response_time”)
colnames(stroop_df) &lt;- c(“participant.No_of_observation”,”block_name”,”name_of_word”,”color_of_word”,”match”,”table_row”,”key_pressed”,”answer”,”response_time_milisecond”)</p>

<h1 id="creatingsaving-files">Creating/Saving files</h1>

<h3 id="save-backward-data-frame-as-csv">Save backward data frame as csv</h3>
<p>write.csv(backward_df,file=”backward_data.csv”)</p>

<h3 id="save-flanker-data-frame-as-csv">Save flanker data frame as csv</h3>
<p>write.csv(flanker_df,file=”flanker_data.csv”)</p>

<h3 id="save-stroop-data-frame-as-csv">Save stroop data frame as csv</h3>
<p>write.csv(stroop_df,file=”stroop_data.csv”)</p>

<h3 id="combinemerge-stroop-task-and-flanker-task-data-frames-into-one-data-frame">Combine/merge stroop task and flanker task data frames into one data frame</h3>
<p>stroop_flanker &lt;- merge(stroop_df,flanker_df, by = “participant.No_of_observation” , all= TRUE)</p>

<h3 id="now-combinemerge-the-backward-data-frame-to-previously-merged-stroop-and-flanker-data">Now, combine/merge the backward data frame to previously merged stroop and flanker data</h3>
<p>experiment_data &lt;- merge(stroop_flanker,backward_df,by =”participant.No_of_observation”, all = TRUE)</p>

<h3 id="save-the-combined-data-of-backward-flanker-and-stroop-data-as-csv-file">Save the combined data of backward, flanker and stroop data as csv file</h3>
<p>write_csv(experiment_data, file=”experiment_data.csv”)</p>

<h2 id="calculate-score-of-each-task-corresponding-to-relevant-participant">Calculate score of each task corresponding to relevant participant</h2>

<h3 id="initialize-an-empty-data-frame-for-task-score-data-of-participants">initialize an empty data frame for task score data of participants</h3>
<p>df_back_score &lt;- data.frame(matrix(ncol = 2, nrow = 0))
df_flank_score &lt;- data.frame(matrix(ncol = 2, nrow = 0))
df_stroop_score &lt;- data.frame(matrix(ncol = 2, nrow = 0))</p>

<h3 id="loop-through-each-list-of-task-data-to-calculate-the-percentage-score-of-participants-in-each-task">loop through each list of task data to calculate the percentage score of participants in each task</h3>

<h5 id="loop-1--for-backward-task">Loop 1 : For backward task</h5>
<p>for (i in 1:length(data_backward)){</p>

<p>#### get result variable from each data frame of participants
  x &lt;- data_backward[[i]]$V3</p>

<p>#### count number of occurrences for each type of result
  x_cout &lt;- table(x)</p>

<p>#### calculate percentage for each type(correct or wrong) of result 
  x_percent &lt;- x_cout/length(x)</p>

<p>#### convert the table containing the percentage of result to data frame
  x_score &lt;- data.frame(x_percent)</p>

<p>#### get the name of the participant
  name &lt;- names(data_backward[i])</p>

<p>#### add participant name to its score for reference
  x_score$participant &lt;- name</p>

<p>#### create a single data frame for all of the participants
  df_back_score &lt;- rbind(df_back_score, x_score)</p>

<p>}</p>

<h3 id="loop-2-for-flanker-task">loop 2: For flanker task</h3>
<p>for (i in 1:length(data_flanker)){</p>

<p>#### get result variable from each data frame of participants
  x &lt;- data_flanker[[i]]$V3</p>

<p>#### count number of occurrences for each type of result
  x_cout &lt;- table(x)</p>

<p>#### calculate percentage for each type(correct or wrong) of result 
  x_percent &lt;- x_cout/length(x)</p>

<p>#### convert the table containing the percentage of result to data frame
  x_score &lt;- data.frame(x_percent)</p>

<p>#### get the name of the participant
  name &lt;- names(data_flanker[i])</p>

<p>#### add participant name to its score for reference
  x_score$participant &lt;- name</p>

<p>#### create a single data frame for all of the participants
  df_flank_score &lt;- rbind(df_flank_score, x_score)</p>

<p>}</p>

<h3 id="loop-3-for-stroop-task">loop 3: For stroop task</h3>
<p>for (i in 1:length(data_stroop)){</p>

<p>#### get result variable from each data frame of participants
  x &lt;- data_stroop[[i]]$V7</p>

<p>#### count number of occurrences for each type of result
  x_cout &lt;- table(x)</p>

<p>#### calculate percentage for each type(correct or wrong) of result 
  x_percent &lt;- x_cout/length(x)</p>

<p>#### convert the table containing the percentage of result to data frame
  x_score &lt;- data.frame(x_percent)</p>

<p>#### get the name of the participant
  name &lt;- names(data_stroop[i])</p>

<p>#### add participant name to its score for reference
  x_score$participant &lt;- name</p>

<p>#### create a single data frame for all of the participants
  df_stroop_score &lt;- rbind(df_stroop_score, x_score)</p>

<p>}</p>

<h3 id="change-variable-names-for-better-understanding">change variable names for better understanding</h3>
<p>colnames(df_back_score) &lt;- c(“result”, “back_score_percentage”,”participant”)
colnames(df_flank_score) &lt;- c(“result”, “flank_score_percentage”,”participant”)
colnames(df_stroop_score) &lt;- c(“result”, “stroop_score_percentage”,”participant”)</p>

<h3 id="getting-the-data-of-participant-where-result-is-correct">getting the data of participant where result is correct</h3>
<p>df_correct &lt;- df_back_score[df_back_score$result==1,]
df_flank_score_correct &lt;- df_flank_score[df_flank_score$result==1,]
df_stroop_correct &lt;- df_stroop_score[df_stroop_score$result==1,]</p>

<h3 id="rounding-the-percentage-of-the-result-to-two-digits">rounding the percentage of the result to two digits</h3>
<p>df_correct2 &lt;- df_correct %&gt;%
  mutate_if(is.numeric,
            round,
            digits = 2)</p>

<p>df_stroop_correct2 &lt;- df_stroop_correct %&gt;%
  mutate_if(is.numeric,
            round,
            digits = 2)</p>

<h2 id="combine-scores-of-participants-with-their-age-and-iq-data">Combine scores of participants with their age and IQ data</h2>

<h3 id="read-excel-file-of-age-and-iq-data-of-participants">read excel file of age and IQ data of participants</h3>
<p>general_data &lt;- read_excel(“Age, IQ, Language.xlsx”)</p>

<h3 id="change-column-names">change column names</h3>
<p>colnames(general_data) &lt;- c(“participant”, “age”, “language”, “IQ”)</p>

<h3 id="merge-participants-general-data-with-backward-flanker-and-stroop-task-score">merge participants general data with backward, flanker and stroop task score</h3>
<p>data_b &lt;- merge(general_data, df_correct2, by =”participant”, all = TRUE )
data_f &lt;- merge(data_b, df_flank_score_correct, by = “participant” , all = TRUE)
data &lt;- merge(data_f, df_stroop_correct2, by = “participant”, all = TRUE)</p>

<h3 id="remove-unnecessary-variables">remove unnecessary variables</h3>
<p>data_new &lt;- subset(data, select = -c(5,7,9))</p>

<h3 id="some-rows-have-na-value-replacing-it-with-0">some rows have NA value, replacing it with 0</h3>
<p>data_new$back_score_percentage[is.na(data_new$back_score_percentage)] &lt;- 0
data_new$flank_score_percentage[is.na(data_new$flank_score_percentage)] &lt;- 0
data_new$stroop_score_percentage[is.na(data_new$stroop_score_percentage)] &lt;- 0</p>

<h1 id="linear-regression-models">Linear regression models</h1>

<h3 id="linear-regression-model-for-backward-task">linear regression model for backward task</h3>
<p>backward_linear_model&lt;- lm(back_score_percentage ~ age+IQ, data = data_new )</p>

<h3 id="linear-regression-model-for-flanker-task">linear regression model for flanker task</h3>
<p>flanker_linear_model &lt;- lm(flank_score_percentage ~ age + IQ, data = data_new )</p>

<h3 id="linear-regression-model-for-stroop-task">linear regression model for stroop task</h3>
<p>stroop_linear_model &lt;- lm(stroop_score_percentage ~ age + IQ, data = data_new)</p>

:ET